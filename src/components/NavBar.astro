---
import Piggy from "public/Piggy.astro";

const getPageState = (pathname: string) => {
  if (pathname === '/login') return 'login'
  if (pathname === '/signup') return 'signup'
  return 'main'
}

const currentPageState = getPageState(Astro.url.pathname)  
---

<nav class="bg-white dark:bg-gray-900 sticky w-full z-20 top-0 start-0 border-b border-gray-200 dark:border-gray-600">
  <div class="max-w-screen-xl flex flex-wrap items-center md:justify-between justify-evenly mx-auto p-4 md:gap-0 gap-2">
  <a href="/" class="flex items-center space-x-3 rtl:space-x-reverse" transition:name="narvbar-logo" transition:animate="initial">
      <Piggy class="h-8 dark:text-white text-black" />
      <span class="self-center md:text-2xl text-lg font-semibold whitespace-nowrap dark:text-white">Money Minder</span>
  </a>
  <div class="group md:hidden flex items-center gap-2">
    <input type="checkbox" id="dropdown-menu" class="md:hidden size-4 text-blue-600 bg-gray-100 border-gray-300 rounded dark:focus:ring-blue-600 dark:ring-offset-gray-800 dark:bg-gray-700 dark:border-gray-600" />
    <label for="dropdown-menu" class="md:hidden select-none">Menú</label>
  </div>
  <div class="items-center justify-between hidden w-full md:flex md:w-auto order-1" id="navbar-sticky">
    <ul class="flex flex-col p-4 gap-2 md:gap-0 md:p-0 mt-4 font-medium md:items-center border border-gray-100 rounded-lg bg-gray-50 md:space-x-8 w-full rtl:space-x-reverse md:flex-row md:mt-0 md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
      <li>
        <a href="/#services" aria-label="services" class="block py-2 px-3 rounded hover:bg-gray-100 md:hover:bg-transparent md:p-0 dark:hover:bg-gray-700 hover:text-cyan-600 md:dark:hover:bg-transparent dark:border-gray-700">Servicios</a>
      </li>
      <li>
        <a href="/#about-us" aria-label="about-us" class="block py-2 px-3 rounded hover:bg-gray-100 md:hover:bg-transparent md:p-0 dark:hover:bg-gray-700 hover:text-cyan-600 md:dark:hover:bg-transparent dark:border-gray-700">Sobre Nosotros</a>
      </li>
      <li>
        <a href="/#terms-conds" aria-label="terms-conds" class="block py-2 px-3 rounded hover:bg-gray-100 md:hover:bg-transparent md:p-0 dark:hover:bg-gray-700 hover:text-cyan-600 md:dark:hover:bg-transparent dark:border-gray-700">Términos y Condiciones</a>
      </li>
      <li class="flex md:order-2 space-x-3 md:space-x-0 rtl:space-x-reverse">
        {
          (currentPageState !== 'login') && (  
            <a href="/login" id="login" class="text-white bg-cyan-500 hover:bg-cyan-500 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-3 py-2 text-center dark:bg-cyan-500 dark:hover:bg-cyan-600 dark:focus:ring-blue-800">
              Iniciar Sesión
            </a>
          )
        }
        {
          (currentPageState === 'login') && (
            <a href="/signup" id="signup" class="text-white bg-cyan-500 hover:bg-cyan-500 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-3 py-2 text-center dark:bg-cyan-500 dark:hover:bg-cyan-600 dark:focus:ring-blue-800">
              Registrarse
            </a>
          )
        }
      </li>
    </ul>
  </div>
  </div>
</nav>

<script>
  document.addEventListener('astro:page-load', () => {
    document.getElementById('dropdown-menu')?.addEventListener('change', (e) => {
      const navbar = document.getElementById('navbar-sticky')!
      if ((e.target as HTMLInputElement).checked) {
        navbar.classList.remove('hidden')
        navbar.classList.add('flex', 'animate-slide-in-top', 'order-1')
      } else {
        navbar.classList.add('hidden')
        navbar.classList.remove('flex', 'animate-slide-in-top', 'order-1')
      }
    })

    const sections = document.querySelectorAll('section')
    const navItems = document.querySelectorAll('li a')
  
    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            console.log(item.getAttribute('aria-label'))
            console.log(entry.target.id)
            if (item.getAttribute('aria-label') === entry.target.id) {
              item.classList.add('text-cyan-500')
            } else {
              item.classList.remove('text-cyan-500')
            }
          })
        }
      })
    }
  
    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: '0px',
      threshold: 0.3,
    })
  
    sections.forEach((section) => {
      observer.observe(section);
    })
  
    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === 'hidden') {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        })
      }
    }
  })
</script>
