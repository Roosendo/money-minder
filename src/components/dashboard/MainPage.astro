---
import { Image } from 'astro:assets'
import Fifth from '@images/5.webp'
import Quote from '@components/Quote.tsx'
import FinancialSummary from '@dashboard/FinancialSummary.tsx'
import RecentTransactions from '@dashboard/RecentTransactions.tsx'
---

<section class="flex flex-col mx-auto items-center w-[80dvw] h-[80dvh] justify-center rounded-3xl px-4 my-6">
  <Image 
    src={Fifth}
    alt='Main banner from Money Minder'
    class='absolute w-[80dvw] h-[80dvh] md:object-fit object-cover rounded-3xl opacity-30 dark:opacity-20' />
    <div class="flex flex-col gap-3">
      <h1 class="text-center text-4xl font-bold mix-blend-difference md:text-8xl">Bienvenido a Money Minder</h1>
      <p class="text-center text-base fonrt-medium mix-blend-difference md:text-xl md:w-1/2 w-2/3 m-auto">Explora las opciones disponibles para personalizar tu experiencia y aprovechar al máximo nuestros servicios.</p>
    </div>
</section>

<div class="container mx-auto p-4 text-black dark:text-white">
  <div class="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3">
    
    <!-- Resumen Financiero Rápido -->
    <FinancialSummary client:load />
    
    <!-- Transacciones Recientes -->
    <RecentTransactions client:load />
    
    <!-- Gráfico de Flujo de Efectivo -->
    <div class="bg-gray-200 dark:bg-gray-900 shadow-lg rounded-lg p-4 col-span-1 md:col-span-2 lg:col-span-3">
      <h2 class="text-lg font-semibold">Flujo de Efectivo</h2>
      <canvas id="cashFlowChart"></canvas>
    </div>
    
    <!-- Categorías Principales -->
    <div class="bg-gray-200 dark:bg-gray-900 shadow-lg rounded-lg p-4 col-span-1 md:col-span-2 lg:col-span-3">
      <h2 class="text-lg font-semibold">Categorías Principales</h2>
      <canvas id="topCategoriesChart" class="max-h-96"></canvas>
    </div>
    
    <!-- Progreso hacia Objetivos -->
    <div class="bg-gray-200 dark:bg-gray-900 shadow-lg rounded-lg p-4">
      <h2 class="text-lg font-semibold mb-4">Progreso hacia Objetivos</h2>
      <div id="goals" class="space-y-4">
        <!-- Aquí podrías añadir barras de progreso para diferentes objetivos -->
      </div>
    </div>
    
    <!-- Alertas y Notificaciones -->
    <div class="bg-gray-200 dark:bg-gray-900 shadow-lg rounded-lg p-4">
      <h2 class="text-lg font-semibold mb-4">Recordatorios</h2>
      <div id="reminders" class="space-y-4">
        <!-- Más alertas -->
      </div>
    </div>
    <Quote client:load />
  </div>
</div>

<script>
  import { $ } from '@lib/dom-selector'
  import { createGraphic, createGraphicBar } from '@utils/create-graph'
  import { createSavingGoalElement, createReminderElement } from '@utils/ui'
  import { fetchDataSavings, fetchDataReminders, fetchCashFlow, fetchMainCategories } from '@utils/api'

  document.addEventListener('astro:page-load', async () => {
    const ctx = (document.getElementById('cashFlowChart') as HTMLCanvasElement)
    const ctxTopCategoriesChart = (document.getElementById('topCategoriesChart') as HTMLCanvasElement)
    const $reminders = $('#reminders') as HTMLDivElement
    const $goals = $('#goals') as HTMLDivElement

    const dataReminders = await fetchDataReminders()
    if (dataReminders.length === 0) {
      $reminders.innerHTML = '<p>No hay recordatorios disponibles</p>'
    } else {
      dataReminders.forEach((reminder) => {
        const reminderElement = createReminderElement(reminder, false)
        $reminders.appendChild(reminderElement)
      })
    }

    const dataGoals = await fetchDataSavings()
    if (dataGoals.length === 0) {
      $goals.innerHTML = '<p>No hay objetivos de ahorro disponibles</p>'
    } else {
      dataGoals.forEach((goal) => {
        const goalElement = createSavingGoalElement(goal, false)
        $goals.appendChild(goalElement)
      })
    }

    // logica para obtener las categorías principales
    const dataMC = await fetchMainCategories()

    if (dataMC.length > 0) {
      const categories = dataMC.map(item => item.category)
      const totalAmounts = dataMC.map(item => item.total)
  
      createGraphic(ctxTopCategoriesChart, categories, totalAmounts, 'Categorías Principales')
    } else {
      createGraphic(ctxTopCategoriesChart, ['Sin datos'], [], 'Categorías Principales')
    }

    // logica para obtener el flujo de efectivo
    const dataCF = await fetchCashFlow()

    const months: Record<string, string> = {
      '01': 'Enero',
      '02': 'Febrero',
      '03': 'Marzo',
      '04': 'Abril',
      '05': 'Mayo',
      '06': 'Junio',
      '07': 'Julio',
      '08': 'Agosto',
      '09': 'Septiembre',
      '10': 'Octubre',
      '11': 'Noviembre',
      '12': 'Diciembre'
    }

    if (dataCF) {
      const ingresosMensuales = dataCF.map(item => item.total_ingresos)
      const egresosMensuales = dataCF.map(item => item.total_egresos)
      const saldoNetoMensual = ingresosMensuales.map((ingreso, index) => ingreso - (egresosMensuales[index] || 0))
      const labelsToShow = dataCF.map(item => months[item.month] || item.month)
  
      if (labelsToShow) createGraphicBar(ctx, labelsToShow, ingresosMensuales, egresosMensuales, saldoNetoMensual)
    } else {
      createGraphicBar(ctx, [], [], [], [])
    }
  })
</script>
